basePath: /
definitions:
  requests.LoginRequest:
    properties:
      password:
        description: |-
          Password is the account secret
          example: secret123
        type: string
      username:
        description: |-
          Username is the account identifier
          example: alice
        type: string
    required:
    - password
    - username
    type: object
  requests.RegisterRequest:
    properties:
      password:
        description: |-
          Password must be at least 6 characters
          example: secret123
        minLength: 6
        type: string
      username:
        description: |-
          Username is the desired login name (3-50 chars)
          example: alice
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  response.BaseResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ImageItem:
    properties:
      content_type:
        description: |-
          ContentType is the MIME type
          example: image/jpeg
        type: string
      filename:
        description: |-
          Filename is the original filename
          example: holiday.jpg
        type: string
      id:
        description: |-
          ID is the image identifier
          example: 10
        type: integer
      path:
        description: |-
          Path is the storage path or URL
          example: /uploads/1/holiday.jpg
        type: string
      size_bytes:
        description: |-
          SizeBytes is the file size in bytes
          example: 204800
        type: integer
      uploaded_at:
        description: |-
          UploadedAt is the upload time (RFC3339)
          example: 2025-01-01T12:00:00Z
        type: string
      user_id:
        description: |-
          UserID is the owner user id (nullable)
          example: 1
        type: integer
    type: object
  response.ImageResponse:
    properties:
      data:
        $ref: '#/definitions/response.ImageItem'
      message:
        type: string
      status:
        type: string
    type: object
  response.ImagesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.ImageItem'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.LoginData:
    properties:
      access_token:
        description: |-
          AccessToken is the JWT for API access
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_at:
        description: |-
          ExpiresAt is RFC3339 timestamp
          example: 2025-01-01T12:00:00Z
        type: string
      token_type:
        description: |-
          TokenType is typically "Bearer"
          example: Bearer
        type: string
    type: object
  response.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/response.LoginData'
      message:
        type: string
      status:
        type: string
    type: object
  response.RegisterData:
    properties:
      created_at:
        description: |-
          CreatedAt is the account creation time (RFC3339)
          example: 2025-01-01T12:00:00Z
        type: string
      id:
        description: |-
          ID is the user identifier
          example: 1
        type: integer
      username:
        description: |-
          Username is the registered username
          example: alice
        type: string
    type: object
  response.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/response.RegisterData'
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Swagger documentation for exposed APIs.
  title: Backend Hackathon API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Obtain JWT access token
      parameters:
      - description: Login payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Register payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register
      tags:
      - auth
  /api/v1/ping-auth:
    get:
      description: Requires Bearer token; returns pong_auth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Authenticated ping
      tags:
      - system
  /api/v1/resource/images:
    get:
      description: Returns images belonging to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ImagesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List my images
      tags:
      - resource
  /api/v1/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file (PNG/JPEG/WebP) up to 8MB. Client may send any file via form field "file"; backend detects content-type from the first 512 bytes and rejects non-image with 415; after confirming image, checks size (<= 8MB) and rejects with 413. Accepts legacy form field "data" as a fallback. Saves file under repo-local directory tmp/ with generated name img_*; persists metadata (filename, content_type, size_bytes, path, user_agent, client_ip).
      parameters:
      - description: Image file to upload (form field name: file)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ImageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload image
      tags:
      - resource
  /ping:
    get:
      description: Returns pong
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Health check
      tags:
      - system
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
